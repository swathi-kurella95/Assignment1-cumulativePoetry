/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cumulative.poetry;

public class Poet
{
    static String[] lines = new String[]{"house that Jack built","malth that lay in","rat that ate","cat that killed",
            "dog that worried ","cow with the crumpled horn that tossed","maiden all forlorn that milked",
            "man all tattered and torn that kissed","priest all shaven and shorn that married","rooster that crowed in the morn that woke",
            "farmer sowing his corn that kept","horse and the hound and the horn that belonged to"};
    static String finalRecite="";

    static String reveal(int dayId)
    {
        // System.out.println(("in reveal"));
        int day=dayId-1;
        System.out.println("Day -" + dayId);
        StringBuilder Poem=new StringBuilder();
        Poem.append("This is the"+" ");
        if(day==0)
        {
            Poem.append(lines[day]+"\n");
        }
        else
        {
            // StringBuilder Poem=new StringBuilder();

            for(int i=day;i>=0;i--)
            {
                if(i==day)
                {
                    Poem.append(lines[i]+"\n");

                }
                else
                    Poem.append("\t"+lines[i]+"\n");

            }
        }
        return String.valueOf(Poem);
    }

    static String recite()
    {
        for(int DayCount=1;DayCount<=lines.length;DayCount++) {
            System.out.println("Day"+" "+ DayCount);
            StringBuilder st = new StringBuilder();

            for (int i = DayCount-1; i >= 0; i--) {
                //System.out.println(i);System.out.println(i);
                if (i == DayCount- 1) {
                    st.append("This is the" + " " + lines[i] + "\n");
                } else {
                    st.append("\t" + lines[i] + "\n");

                }
            }

            System.out.println(st);
            finalRecite += st;
        }
        return finalRecite;

    }


    static boolean isEmpty()
    {
        return (finalRecite.equals(" "));
    }

    public static void main(String[] args) {
        // write your code here
        // Actions a=new Actions();

        if(args[0].contains("reveal"))
        {
            //System.out.println("in reveal");
            int day = Integer.parseInt(args[1]);
            String PoemOfDay=reveal(day);
            System.out.println(PoemOfDay);
        }

        if(args[0].contains("recite"))
        {
            // System.out.println("onnhjsdh");
            //String recite1=recite();
            //System.out.println(recite1);
            recite();
        }
    }
}

